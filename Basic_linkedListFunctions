import java.util.*;
public class addfirst{
    public  static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    public static Node tail;
    //we can make the size as property instead of writing a function for size calculation
    public static int size;
    public void addnode(int data){
    Node newnode= new Node(data);
        size++;
        if(head==null){
         head=tail=newnode;
         return;
        }
        newnode.next=head;
        head=newnode; 
    }
    public void addlast(int data){
            Node newnode=new Node(data);
            size++;
            if(head==null){
                head=tail=newnode;
                return;
            }
            tail.next=newnode;
            tail=newnode;
        }
    public void print(){
        if(head==null){
            System.out.println("list is empty");
            return;
        }
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
        System.out.println();
        
    }
    public void addpos(int pos,int data){
        Node newnode=new Node(data);
        if(pos==0){
            addnode(data);
            return;
        }
        size++;
        Node temp=head;
        int i=0;
       while(i<pos-1){
        temp=temp.next;
        i++;
       }
       newnode.next=temp.next;
       temp.next=newnode;
       
    }
    public int size(){
        Node temp=head;
        int count =0;
        while(temp!=null){
            temp=temp.next;
              count++;
        }
        return count;
    }
    public int removefirst(){
        if(size==0){
            System.out.println("list is empty");
            return -1;
        }
        else if(size==1){
            size=0;
            int val=head.data;
            head=tail=null;
            return val;
        }
        else{
            size--;
            int val=head.data;
            head=head.next;
            return val;
        }
    }
    public int removelast(){
        if(size==0){
            System.out.println("list is empty");
            return -1;
        }
        else if(size==1){
            int val=head.data;
            head=tail=null;
            return val;
        }
        else{
            Node temp=head;
            while(temp.next!=tail){
                temp=temp.next;
            }
            int val=temp.next.data;
            temp.next=null;
            tail=temp;
            size--;
            return val;
        }
    }
    public int search(int key){
        Node temp=head;
        for(int i=0;i<size;i++){
            if(key==temp.data)
               return i;
          else{
               temp=temp.next;
          }  
            
        }
        return -1;
    }
    public int recursive_search(Node head,int key,int indx){
        if(head==null)
           return -1;
        
        if(head.data==key)
             return indx;
        return recursive_search(head.next,key,indx+1);    
    
    }
    public void reverse(){
        Node prev=null;
        Node curr=tail=head;
        Node next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }
    public void removeFromEnd(int n){
        int sz=0;
        Node temp=head;
        while(temp!=null){
            temp=temp.next;
            sz++;
        }
        if(n==sz){
            head=head.next;
            return;
        }
        int i=1;
        int iToFind=sz-n;
        Node prev=head;
        while(i<iToFind){
            prev=prev.next;
            i++;
        }
        prev.next=prev.next.next;
        return;
    }
    
    public static void main(String args[]){
        addfirst ll=new addfirst();
        ll.print();
        ll.addnode(1);
        ll.addnode(5);
        ll.print();
        ll.addnode(2);
        ll.print();
        ll.addlast(3);
        ll.print();
        ll.addlast(4);
        ll.print();
        ll.addpos(2,100);
        ll.print();
        System.out.println("size of linked list using size function:"+ll.size());
        ll.removefirst();
        ll.print();
        ll.removelast();
        ll.print();
        System.out.println("size of linked list using size propeerty:"+ll.size);
        System.out.println(ll.search(300));
        System.out.println(ll.recursive_search(head,100,0));
        ll.reverse();
        ll.print();
        ll.removeFromEnd(2);
        ll.print();

    }

}
